// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HootFsServiceClient is the client API for HootFsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HootFsServiceClient interface {
	GetDirectoryContents(ctx context.Context, in *GetDirectoryContentsRequest, opts ...grpc.CallOption) (*GetDirectoryContentsResponse, error)
	MakeDirectory(ctx context.Context, in *MakeDirectoryRequest, opts ...grpc.CallOption) (*MakeDirectoryResponse, error)
	AddNewFile(ctx context.Context, in *AddNewFileRequest, opts ...grpc.CallOption) (*AddNewFileResponse, error)
	UpdateFileContents(ctx context.Context, in *UpdateFileContentsRequest, opts ...grpc.CallOption) (*UpdateFileContentsResponse, error)
	GetFileContents(ctx context.Context, in *GetFileContentsRequest, opts ...grpc.CallOption) (*GetFileContentsResponse, error)
	// Equal to rename.
	MoveObject(ctx context.Context, in *MoveObjectRequest, opts ...grpc.CallOption) (*MoveObjectResponse, error)
	RemoveObject(ctx context.Context, in *RemoveObjectRequest, opts ...grpc.CallOption) (*RemoveObjectResponse, error)
}

type hootFsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHootFsServiceClient(cc grpc.ClientConnInterface) HootFsServiceClient {
	return &hootFsServiceClient{cc}
}

func (c *hootFsServiceClient) GetDirectoryContents(ctx context.Context, in *GetDirectoryContentsRequest, opts ...grpc.CallOption) (*GetDirectoryContentsResponse, error) {
	out := new(GetDirectoryContentsResponse)
	err := c.cc.Invoke(ctx, "/hootfs.head.HootFsService/GetDirectoryContents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hootFsServiceClient) MakeDirectory(ctx context.Context, in *MakeDirectoryRequest, opts ...grpc.CallOption) (*MakeDirectoryResponse, error) {
	out := new(MakeDirectoryResponse)
	err := c.cc.Invoke(ctx, "/hootfs.head.HootFsService/MakeDirectory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hootFsServiceClient) AddNewFile(ctx context.Context, in *AddNewFileRequest, opts ...grpc.CallOption) (*AddNewFileResponse, error) {
	out := new(AddNewFileResponse)
	err := c.cc.Invoke(ctx, "/hootfs.head.HootFsService/AddNewFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hootFsServiceClient) UpdateFileContents(ctx context.Context, in *UpdateFileContentsRequest, opts ...grpc.CallOption) (*UpdateFileContentsResponse, error) {
	out := new(UpdateFileContentsResponse)
	err := c.cc.Invoke(ctx, "/hootfs.head.HootFsService/UpdateFileContents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hootFsServiceClient) GetFileContents(ctx context.Context, in *GetFileContentsRequest, opts ...grpc.CallOption) (*GetFileContentsResponse, error) {
	out := new(GetFileContentsResponse)
	err := c.cc.Invoke(ctx, "/hootfs.head.HootFsService/GetFileContents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hootFsServiceClient) MoveObject(ctx context.Context, in *MoveObjectRequest, opts ...grpc.CallOption) (*MoveObjectResponse, error) {
	out := new(MoveObjectResponse)
	err := c.cc.Invoke(ctx, "/hootfs.head.HootFsService/MoveObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hootFsServiceClient) RemoveObject(ctx context.Context, in *RemoveObjectRequest, opts ...grpc.CallOption) (*RemoveObjectResponse, error) {
	out := new(RemoveObjectResponse)
	err := c.cc.Invoke(ctx, "/hootfs.head.HootFsService/RemoveObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HootFsServiceServer is the server API for HootFsService service.
// All implementations must embed UnimplementedHootFsServiceServer
// for forward compatibility
type HootFsServiceServer interface {
	GetDirectoryContents(context.Context, *GetDirectoryContentsRequest) (*GetDirectoryContentsResponse, error)
	MakeDirectory(context.Context, *MakeDirectoryRequest) (*MakeDirectoryResponse, error)
	AddNewFile(context.Context, *AddNewFileRequest) (*AddNewFileResponse, error)
	UpdateFileContents(context.Context, *UpdateFileContentsRequest) (*UpdateFileContentsResponse, error)
	GetFileContents(context.Context, *GetFileContentsRequest) (*GetFileContentsResponse, error)
	// Equal to rename.
	MoveObject(context.Context, *MoveObjectRequest) (*MoveObjectResponse, error)
	RemoveObject(context.Context, *RemoveObjectRequest) (*RemoveObjectResponse, error)
	mustEmbedUnimplementedHootFsServiceServer()
}

// UnimplementedHootFsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHootFsServiceServer struct {
}

func (UnimplementedHootFsServiceServer) GetDirectoryContents(context.Context, *GetDirectoryContentsRequest) (*GetDirectoryContentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDirectoryContents not implemented")
}
func (UnimplementedHootFsServiceServer) MakeDirectory(context.Context, *MakeDirectoryRequest) (*MakeDirectoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeDirectory not implemented")
}
func (UnimplementedHootFsServiceServer) AddNewFile(context.Context, *AddNewFileRequest) (*AddNewFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNewFile not implemented")
}
func (UnimplementedHootFsServiceServer) UpdateFileContents(context.Context, *UpdateFileContentsRequest) (*UpdateFileContentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFileContents not implemented")
}
func (UnimplementedHootFsServiceServer) GetFileContents(context.Context, *GetFileContentsRequest) (*GetFileContentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileContents not implemented")
}
func (UnimplementedHootFsServiceServer) MoveObject(context.Context, *MoveObjectRequest) (*MoveObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveObject not implemented")
}
func (UnimplementedHootFsServiceServer) RemoveObject(context.Context, *RemoveObjectRequest) (*RemoveObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveObject not implemented")
}
func (UnimplementedHootFsServiceServer) mustEmbedUnimplementedHootFsServiceServer() {}

// UnsafeHootFsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HootFsServiceServer will
// result in compilation errors.
type UnsafeHootFsServiceServer interface {
	mustEmbedUnimplementedHootFsServiceServer()
}

func RegisterHootFsServiceServer(s grpc.ServiceRegistrar, srv HootFsServiceServer) {
	s.RegisterService(&HootFsService_ServiceDesc, srv)
}

func _HootFsService_GetDirectoryContents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDirectoryContentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HootFsServiceServer).GetDirectoryContents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hootfs.head.HootFsService/GetDirectoryContents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HootFsServiceServer).GetDirectoryContents(ctx, req.(*GetDirectoryContentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HootFsService_MakeDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeDirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HootFsServiceServer).MakeDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hootfs.head.HootFsService/MakeDirectory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HootFsServiceServer).MakeDirectory(ctx, req.(*MakeDirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HootFsService_AddNewFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNewFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HootFsServiceServer).AddNewFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hootfs.head.HootFsService/AddNewFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HootFsServiceServer).AddNewFile(ctx, req.(*AddNewFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HootFsService_UpdateFileContents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFileContentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HootFsServiceServer).UpdateFileContents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hootfs.head.HootFsService/UpdateFileContents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HootFsServiceServer).UpdateFileContents(ctx, req.(*UpdateFileContentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HootFsService_GetFileContents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileContentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HootFsServiceServer).GetFileContents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hootfs.head.HootFsService/GetFileContents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HootFsServiceServer).GetFileContents(ctx, req.(*GetFileContentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HootFsService_MoveObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HootFsServiceServer).MoveObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hootfs.head.HootFsService/MoveObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HootFsServiceServer).MoveObject(ctx, req.(*MoveObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HootFsService_RemoveObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HootFsServiceServer).RemoveObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hootfs.head.HootFsService/RemoveObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HootFsServiceServer).RemoveObject(ctx, req.(*RemoveObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HootFsService_ServiceDesc is the grpc.ServiceDesc for HootFsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HootFsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hootfs.head.HootFsService",
	HandlerType: (*HootFsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDirectoryContents",
			Handler:    _HootFsService_GetDirectoryContents_Handler,
		},
		{
			MethodName: "MakeDirectory",
			Handler:    _HootFsService_MakeDirectory_Handler,
		},
		{
			MethodName: "AddNewFile",
			Handler:    _HootFsService_AddNewFile_Handler,
		},
		{
			MethodName: "UpdateFileContents",
			Handler:    _HootFsService_UpdateFileContents_Handler,
		},
		{
			MethodName: "GetFileContents",
			Handler:    _HootFsService_GetFileContents_Handler,
		},
		{
			MethodName: "MoveObject",
			Handler:    _HootFsService_MoveObject_Handler,
		},
		{
			MethodName: "RemoveObject",
			Handler:    _HootFsService_RemoveObject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "head.proto",
}
