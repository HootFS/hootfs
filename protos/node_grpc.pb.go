// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClusterServiceClient is the client API for ClusterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClusterServiceClient interface {
	MakeDirectoryCS(ctx context.Context, in *MakeDirectoryCSRequest, opts ...grpc.CallOption) (*MakeDirectoryCSResponse, error)
	AddNewFileCS(ctx context.Context, in *AddNewFileCSRequest, opts ...grpc.CallOption) (*AddNewFileCSResponse, error)
	UpdateFileContentsCS(ctx context.Context, in *UpdateFileContentsCSRequest, opts ...grpc.CallOption) (*UpdateFileContentsCSResponse, error)
	MoveObjectCS(ctx context.Context, in *MoveObjectCSRequest, opts ...grpc.CallOption) (*MoveObjectCSResponse, error)
	RemoveObjectCS(ctx context.Context, in *RemoveObjectCSRequest, opts ...grpc.CallOption) (*RemoveObjectCSResponse, error)
	ClusterAdditionCS(ctx context.Context, in *ClusterAdditionCSRequest, opts ...grpc.CallOption) (*ClusterAdditionCSResponse, error)
	ClusterRemovalCS(ctx context.Context, in *ClusterRemovalCSRequest, opts ...grpc.CallOption) (*ClusterRemovalCSResponse, error)
	PingCS(ctx context.Context, in *PingCSRequest, opts ...grpc.CallOption) (*PingCSResponse, error)
}

type clusterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClusterServiceClient(cc grpc.ClientConnInterface) ClusterServiceClient {
	return &clusterServiceClient{cc}
}

func (c *clusterServiceClient) MakeDirectoryCS(ctx context.Context, in *MakeDirectoryCSRequest, opts ...grpc.CallOption) (*MakeDirectoryCSResponse, error) {
	out := new(MakeDirectoryCSResponse)
	err := c.cc.Invoke(ctx, "/hootfs.node.ClusterService/MakeDirectoryCS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) AddNewFileCS(ctx context.Context, in *AddNewFileCSRequest, opts ...grpc.CallOption) (*AddNewFileCSResponse, error) {
	out := new(AddNewFileCSResponse)
	err := c.cc.Invoke(ctx, "/hootfs.node.ClusterService/AddNewFileCS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) UpdateFileContentsCS(ctx context.Context, in *UpdateFileContentsCSRequest, opts ...grpc.CallOption) (*UpdateFileContentsCSResponse, error) {
	out := new(UpdateFileContentsCSResponse)
	err := c.cc.Invoke(ctx, "/hootfs.node.ClusterService/UpdateFileContentsCS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) MoveObjectCS(ctx context.Context, in *MoveObjectCSRequest, opts ...grpc.CallOption) (*MoveObjectCSResponse, error) {
	out := new(MoveObjectCSResponse)
	err := c.cc.Invoke(ctx, "/hootfs.node.ClusterService/MoveObjectCS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) RemoveObjectCS(ctx context.Context, in *RemoveObjectCSRequest, opts ...grpc.CallOption) (*RemoveObjectCSResponse, error) {
	out := new(RemoveObjectCSResponse)
	err := c.cc.Invoke(ctx, "/hootfs.node.ClusterService/RemoveObjectCS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) ClusterAdditionCS(ctx context.Context, in *ClusterAdditionCSRequest, opts ...grpc.CallOption) (*ClusterAdditionCSResponse, error) {
	out := new(ClusterAdditionCSResponse)
	err := c.cc.Invoke(ctx, "/hootfs.node.ClusterService/ClusterAdditionCS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) ClusterRemovalCS(ctx context.Context, in *ClusterRemovalCSRequest, opts ...grpc.CallOption) (*ClusterRemovalCSResponse, error) {
	out := new(ClusterRemovalCSResponse)
	err := c.cc.Invoke(ctx, "/hootfs.node.ClusterService/ClusterRemovalCS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) PingCS(ctx context.Context, in *PingCSRequest, opts ...grpc.CallOption) (*PingCSResponse, error) {
	out := new(PingCSResponse)
	err := c.cc.Invoke(ctx, "/hootfs.node.ClusterService/PingCS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterServiceServer is the server API for ClusterService service.
// All implementations must embed UnimplementedClusterServiceServer
// for forward compatibility
type ClusterServiceServer interface {
	MakeDirectoryCS(context.Context, *MakeDirectoryCSRequest) (*MakeDirectoryCSResponse, error)
	AddNewFileCS(context.Context, *AddNewFileCSRequest) (*AddNewFileCSResponse, error)
	UpdateFileContentsCS(context.Context, *UpdateFileContentsCSRequest) (*UpdateFileContentsCSResponse, error)
	MoveObjectCS(context.Context, *MoveObjectCSRequest) (*MoveObjectCSResponse, error)
	RemoveObjectCS(context.Context, *RemoveObjectCSRequest) (*RemoveObjectCSResponse, error)
	ClusterAdditionCS(context.Context, *ClusterAdditionCSRequest) (*ClusterAdditionCSResponse, error)
	ClusterRemovalCS(context.Context, *ClusterRemovalCSRequest) (*ClusterRemovalCSResponse, error)
	PingCS(context.Context, *PingCSRequest) (*PingCSResponse, error)
	mustEmbedUnimplementedClusterServiceServer()
}

// UnimplementedClusterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClusterServiceServer struct {
}

func (UnimplementedClusterServiceServer) MakeDirectoryCS(context.Context, *MakeDirectoryCSRequest) (*MakeDirectoryCSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeDirectoryCS not implemented")
}
func (UnimplementedClusterServiceServer) AddNewFileCS(context.Context, *AddNewFileCSRequest) (*AddNewFileCSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNewFileCS not implemented")
}
func (UnimplementedClusterServiceServer) UpdateFileContentsCS(context.Context, *UpdateFileContentsCSRequest) (*UpdateFileContentsCSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFileContentsCS not implemented")
}
func (UnimplementedClusterServiceServer) MoveObjectCS(context.Context, *MoveObjectCSRequest) (*MoveObjectCSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveObjectCS not implemented")
}
func (UnimplementedClusterServiceServer) RemoveObjectCS(context.Context, *RemoveObjectCSRequest) (*RemoveObjectCSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveObjectCS not implemented")
}
func (UnimplementedClusterServiceServer) ClusterAdditionCS(context.Context, *ClusterAdditionCSRequest) (*ClusterAdditionCSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClusterAdditionCS not implemented")
}
func (UnimplementedClusterServiceServer) ClusterRemovalCS(context.Context, *ClusterRemovalCSRequest) (*ClusterRemovalCSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClusterRemovalCS not implemented")
}
func (UnimplementedClusterServiceServer) PingCS(context.Context, *PingCSRequest) (*PingCSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingCS not implemented")
}
func (UnimplementedClusterServiceServer) mustEmbedUnimplementedClusterServiceServer() {}

// UnsafeClusterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClusterServiceServer will
// result in compilation errors.
type UnsafeClusterServiceServer interface {
	mustEmbedUnimplementedClusterServiceServer()
}

func RegisterClusterServiceServer(s grpc.ServiceRegistrar, srv ClusterServiceServer) {
	s.RegisterService(&ClusterService_ServiceDesc, srv)
}

func _ClusterService_MakeDirectoryCS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeDirectoryCSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).MakeDirectoryCS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hootfs.node.ClusterService/MakeDirectoryCS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).MakeDirectoryCS(ctx, req.(*MakeDirectoryCSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_AddNewFileCS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNewFileCSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).AddNewFileCS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hootfs.node.ClusterService/AddNewFileCS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).AddNewFileCS(ctx, req.(*AddNewFileCSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_UpdateFileContentsCS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFileContentsCSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).UpdateFileContentsCS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hootfs.node.ClusterService/UpdateFileContentsCS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).UpdateFileContentsCS(ctx, req.(*UpdateFileContentsCSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_MoveObjectCS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveObjectCSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).MoveObjectCS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hootfs.node.ClusterService/MoveObjectCS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).MoveObjectCS(ctx, req.(*MoveObjectCSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_RemoveObjectCS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveObjectCSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).RemoveObjectCS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hootfs.node.ClusterService/RemoveObjectCS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).RemoveObjectCS(ctx, req.(*RemoveObjectCSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_ClusterAdditionCS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterAdditionCSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).ClusterAdditionCS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hootfs.node.ClusterService/ClusterAdditionCS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).ClusterAdditionCS(ctx, req.(*ClusterAdditionCSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_ClusterRemovalCS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterRemovalCSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).ClusterRemovalCS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hootfs.node.ClusterService/ClusterRemovalCS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).ClusterRemovalCS(ctx, req.(*ClusterRemovalCSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_PingCS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingCSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).PingCS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hootfs.node.ClusterService/PingCS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).PingCS(ctx, req.(*PingCSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClusterService_ServiceDesc is the grpc.ServiceDesc for ClusterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClusterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hootfs.node.ClusterService",
	HandlerType: (*ClusterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MakeDirectoryCS",
			Handler:    _ClusterService_MakeDirectoryCS_Handler,
		},
		{
			MethodName: "AddNewFileCS",
			Handler:    _ClusterService_AddNewFileCS_Handler,
		},
		{
			MethodName: "UpdateFileContentsCS",
			Handler:    _ClusterService_UpdateFileContentsCS_Handler,
		},
		{
			MethodName: "MoveObjectCS",
			Handler:    _ClusterService_MoveObjectCS_Handler,
		},
		{
			MethodName: "RemoveObjectCS",
			Handler:    _ClusterService_RemoveObjectCS_Handler,
		},
		{
			MethodName: "ClusterAdditionCS",
			Handler:    _ClusterService_ClusterAdditionCS_Handler,
		},
		{
			MethodName: "ClusterRemovalCS",
			Handler:    _ClusterService_ClusterRemovalCS_Handler,
		},
		{
			MethodName: "PingCS",
			Handler:    _ClusterService_PingCS_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node.proto",
}
